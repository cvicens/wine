apiVersion: v1
kind: Template
metadata:
  name: wine-template
  annotations:
    openshift.io/display-name: "Wine Application" 
    description: "Example application based on a Spring Boot microservice plus MongoDB\n\nFor more information see https://github.com/cvicens/wine-pairing-mock" 
    tags: "spring-boot,mongodb" 
    iconClass: "icon-spring" 
  message: "Your credentials for MongoDB are ${MONGODB_USER}:${MONGODB_PASSWORD} with admin password: ${MONGODB_ADMIN_PASSWORD}"
  
objects:

# Data exposed
- kind: Secret
  apiVersion: v1
  metadata:
    annotations:
      template.openshift.io/expose-admin_password: '{.data[''database-admin-password'']}'
      template.openshift.io/expose-password: '{.data[''database-password'']}'
      template.openshift.io/expose-username: '{.data[''database-user'']}'
    name: ${DATABASE_SERVICE_NAME}
  stringData:
    database-admin-password: ${MONGODB_ADMIN_PASSWORD}
    database-password: ${MONGODB_PASSWORD}
    database-user: ${MONGODB_USER}
    
# MongoDB persistent volume claim
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: ${DATABASE_SERVICE_NAME}
    annotations:
      description: Defines the PVC associated to MongoDB
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}

# MongoDB deployment configuration
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${DATABASE_SERVICE_NAME}
    labels:
      application: ${NAME}
      deploymentConfig: ${NAME}
    annotations:
      description: Defines how to deploy the database
  spec:
    replicas: 1
    selector:
      name: ${DATABASE_SERVICE_NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: ${DATABASE_SERVICE_NAME}
          application: ${NAME}
        name: ${DATABASE_SERVICE_NAME}
      spec:
        containers:
        - env:
          - name: MONGODB_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${DATABASE_SERVICE_NAME}
          - name: MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${DATABASE_SERVICE_NAME}
          - name: MONGODB_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-admin-password
                name: ${DATABASE_SERVICE_NAME}
          - name: MONGODB_DATABASE
            value: ${MONGODB_DATABASE}
          image: ' '
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 27017
            timeoutSeconds: 1
          name: mongodb
          ports:
          - containerPort: 27017
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                --eval="quit()"
            initialDelaySeconds: 3
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${MEMORY_MONGODB_LIMIT}
          volumeMounts:
          - mountPath: /var/lib/mongodb/data
            name: ${DATABASE_SERVICE_NAME}-data
        volumes:
        - name: ${DATABASE_SERVICE_NAME}-data
          persistentVolumeClaim:
            claimName: ${DATABASE_SERVICE_NAME}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - mongodb
        from:
          kind: ImageStreamTag
          name: mongodb:${MONGODB_VERSION}
          namespace: ${NAMESPACE}
      type: ImageChange
    - type: ConfigChange

# MongoDB service
- kind: Service
  apiVersion: v1
  metadata:
    name: ${DATABASE_SERVICE_NAME}
    annotations:
      description: Exposes the database server
      template.openshift.io/expose-uri: mongodb://{.spec.clusterIP}:{.spec.ports[?(.name=="mongo")].port}
  spec:
    ports:
    - name: mongodb
      port: 27017
      targetPort: 27017
    selector:
      name: ${DATABASE_SERVICE_NAME}

# Wine Microservice
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: ${NAME}
    labels:
      application: ${NAME}
    annotations:
      description: Keeps track of changes in the application image
  spec:
    dockerImageRepository: ''
    tags:
      - name: latest

- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: ${NAME}
    labels:
      application: ${NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${NAME}:latest
    source:
      git:
        ref: master
        uri: https://github.com/cvicens/wine-pairing-mock
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: redhat-openjdk18-openshift:1.1
          namespace: ${NAMESPACE}
      type: Source
    triggers:
    - github:
        secret: ${GITHUB_WEBHOOK_SECRET}
      type: GitHub
    - generic:
        secret: ${GENERIC_WEBHOOK_SECRET}
      type: Generic
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange

- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${NAME}
    # Labels, we'll use deploymentConfig as selector in our service
    labels:
      deploymentConfig: ${NAME}
      application: ${NAME}
  spec:
    replicas: 1
    selector:
      deploymentConfig: ${NAME}
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        # Labels copied to every POD created
        # Important: Selector based on deploymentConfig
        labels:
          deploymentConfig: ${NAME}
          application: ${NAME}
      spec:
        containers:
        - env:
          - name: MONGODB_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: mongodb
          - name: MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: mongodb
          - name: MONGODB_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-admin-password
                name: mongodb
          - name: MONGODB_DATABASE
            value: ${MONGODB_DATABASE}
          - name: DATABASE_SERVICE_NAME
            value: ${DATABASE_SERVICE_NAME}
          - name: DATABASE_SERVICE_PORT
            value: "27017"
          image: ${NAME}
          imagePullPolicy: Always
          name: ${NAME}
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8443
            protocol: TCP
          - containerPort: 8778
            protocol: TCP
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /pairing
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5            
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: /pairing?foodType=FISH
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${NAME}
        from:
          kind: ImageStreamTag
          name: ${NAME}:latest
      type: ImageChange
    - type: ConfigChange

- kind: Service
  apiVersion: v1
  metadata:
    name: ${NAME}
    labels:
      application: ${NAME}
      deploymentConfig: ${NAME}
    annotations:
      description: The application's http port.
      service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}", "kind": "Service"}]'
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      targetPort: 8080
    # Selects PODs labelled with deploymentConfig === ${NAME}
    selector:
      deploymentConfig: ${NAME}

- kind: Route
  apiVersion: v1
  metadata:
    name: ${NAME}
    annotations:
      template.openshift.io/expose-uri: http://{.spec.host}{.spec.path}
  spec:
    host: ${APPLICATION_DOMAIN}
    to:
      kind: Service
      name: ${NAME}

# Parameters
parameters:

- description: The name assigned to all of the frontend objects defined in this template.
  displayName: Name
  name: NAME
  required: true
  value: wine-service

- description: Maximum amount of memory the Spring Boot API container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 512Mi

- description: The exposed hostname that will route to the service, if left
    blank a value will be defaulted.
  displayName: Application Hostname
  name: APPLICATION_DOMAIN

- displayName: Database Service Name
  name: DATABASE_SERVICE_NAME
  required: true
  value: mongodb
  
- description: Maximum amount of memory the MongoDB container can use.
  displayName: Memory Limit (MongoDB)
  name: MEMORY_MONGODB_LIMIT
  required: true
  value: 512Mi

- description: Volume space available for data, e.g. 512Mi, 2Gi
  displayName: Volume Capacity
  name: VOLUME_CAPACITY
  required: true
  value: 1Gi

- description: Spring Boot API Service database user name
  displayName: Database Username
  from: user[a-zA-Z0-9]{3}
  generate: expression
  name: MONGODB_USER
  required: true

- description: Spring Boot API Service database user password
  displayName: Database User Password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: MONGODB_PASSWORD
  required: true

- description: Spring Boot API Service database admin password
  displayName: Database Admin Password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: MONGODB_ADMIN_PASSWORD
  required: true

- description: Name of the MongoDB database accessed.
  displayName: MongoDB Database Name
  name: MONGODB_DATABASE
  required: true
  value: sampledb

- description: Version of MongoDB image to be used (2.4, 2.6, 3.2 or latest).
  displayName: Version of MongoDB Image
  name: MONGODB_VERSION
  required: true
  value: "3.2"

- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: NAMESPACE
  value: openshift

- description: Spring Boot API Service GITHUB Web-Hook
  displayName: API Service GITHUB Web-Hook
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: GITHUB_WEBHOOK_SECRET
  required: true

- description: Spring Boot API Service Generic Web-Hook
  displayName: API Service Generic Web-Hook
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: GENERIC_WEBHOOK_SECRET
  required: true